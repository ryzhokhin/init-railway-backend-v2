const TelegramBot = require('node-telegram-bot-api');
const token = '7761056672:AAEe8gPZjn3L47D-nrQvUOtAA3nPNnMVfzM';
const bot = new TelegramBot(token, {polling: true});
const webAppUrl = 'https://zhiroazhigatel.netlify.app/';


// Matches "/echo [whatever]"
bot.onText(/\/echo (.+)/, (msg, match) => {
    // 'msg' is the received Message from Telegram
    // 'match' is the result of executing the regexp above on the text content
    // of the message

    const chatId = msg.chat.id;
    const resp = match[1]; // the captured "whatever"

    // send back the matched "whatever" to the chat
    bot.sendMessage(chatId, resp);
});

// Listen for any kind of message. There are different kinds of
// messages.
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if(text === '/start') {
        await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–∏—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å. –£–¥–∞—á–∏ –∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™üî•', {

        })

        await bot.sendMessage(chatId, '–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∏–∫—É–¥–∞', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–í–æ–π—Ç–∏', web_app: {url: webAppUrl}}]
                ]
            }
        })
    }

    if(text === '/hello') {
        await bot.sendMessage(chatId, 'test', {

        })
    }
});

async function sendInvoice(chatId, title, trainingId, price) {
    try {
        await bot.sendInvoice(
            chatId,
            title, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞—Ç–µ–∂–∞
            "–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", // –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            JSON.stringify({ user_id: chatId, training_id: trainingId }), // Payload
            "", // Telegram Stars (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º)
            "XTR", // –í–∞–ª—é—Ç–∞ (Telegram Stars)
            [{ label: title, amount: price * 100 }], // –¶–µ–Ω–∞ –≤ Stars
            {
                need_name: false,
                need_phone_number: false,
                need_email: false,
                need_shipping_address: false
            }
        );

        console.log("‚úÖ –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞:", error);
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}

// ‚úÖ –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏ (–æ—Ç Mini App)
bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
    if (text && text.startsWith("PAYMENT_REQUEST|")) {
        const parts = text.split("|");
        if (parts.length < 4) {
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.");
        }

        const trainingId = parts[1];
        const price = parseInt(parts[2], 10);
        const title = parts[3];

        console.log(`‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂: ID ${trainingId}, –¶–µ–Ω–∞ ${price}, –ù–∞–∑–≤–∞–Ω–∏–µ ${title}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await sendInvoice(chatId, title, trainingId, price);
    }
});

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
bot.on("pre_checkout_query", async (query) => {
    await bot.answerPreCheckoutQuery(query.id, true);
});

// üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
bot.on("successful_payment", async (msg) => {
    const chatId = msg.chat.id;
    const paymentInfo = msg.successful_payment;

    console.log("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ:", paymentInfo);

    try {
        // if (!paymentInfo.invoice_payload) {
        //     throw new Error("üö® –û—à–∏–±–∫–∞: invoice_payload –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
        // }

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º user_id –∏ telegram_id –∏–∑ payload
        const payload = JSON.parse(paymentInfo.invoice_payload);
        const telegramId = payload.telegram_id; // Telegram ID
        const userId = payload.user_id; // User ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const trainingId = payload.training_id;

        console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: Telegram ID: ${telegramId}, User ID: ${userId}, Training ID: ${trainingId}`);

        // if (!userId) {
        //     throw new Error("‚ùå –û—à–∏–±–∫–∞: user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ payload!");
        // }

        // **–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
        console.log(`üåç –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ${trainingId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

        const addTrainingResponse = await axios.post(`https://init-railway-backend-v2-production.up.railway.app/trainings/add-training`, {
            user_id: userId,
            training_id: trainingId,
        });

        console.log("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:", addTrainingResponse.data);
        await bot.sendMessage(chatId, `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üéâ –¢–µ–ø–µ—Ä—å –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏:", error);
        await bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.");
    }
});

console.log("üöÄ Bot is running...");

module.exports = bot;