const TelegramBot = require('node-telegram-bot-api');
const token = '7761056672:AAEe8gPZjn3L47D-nrQvUOtAA3nPNnMVfzM';
const bot = new TelegramBot(token, {polling: true});
const webAppUrl = 'https://zhiroazhigatel.netlify.app/';


// Matches "/echo [whatever]"
bot.onText(/\/echo (.+)/, (msg, match) => {
    // 'msg' is the received Message from Telegram
    // 'match' is the result of executing the regexp above on the text content
    // of the message

    const chatId = msg.chat.id;
    const resp = match[1]; // the captured "whatever"

    // send back the matched "whatever" to the chat
    bot.sendMessage(chatId, resp);
});

// Listen for any kind of message. There are different kinds of
// messages.
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if(text === '/start') {
        await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–∏—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å. –£–¥–∞—á–∏ –∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™üî•', {

        })

        await bot.sendMessage(chatId, '–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∏–∫—É–¥–∞', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–í–æ–π—Ç–∏', web_app: {url: webAppUrl}}]
                ]
            }
        })
    }


    if(text === '/test') {
        await bot.sendMessage(chatId, 'test1', {

        })
    }
});

// üìå Handles Test Payment Request
bot.onText(/\/testpayment/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        const response = await axios.post(`${BACKEND_PUBLIC_URL}/payments/test-payment`, {
            title: "Test Course Purchase",
            description: "Testing Telegram Stars payment",
            payload: `test_payment_transaction_${chatId}`,
            currency: "XTR",
            prices: [{ label: "Test Purchase", amount: 1 }], // 1 Star (100 units)
        });

        if (response.data.success) {
            const invoiceLink = response.data.invoiceLink;
            await bot.sendMessage(
                chatId,
                `‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å",
                                    url: invoiceLink,
                                },
                            ],
                        ],
                    },
                }
            );
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${response.data.error}`);
        }
    } catch (error) {
        console.error("‚ùå Error generating invoice:", error);
        await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});

// üìå Handles Successful Payment Confirmation
bot.on("successful_payment", async (msg) => {
    const chatId = msg.chat.id;
    const paymentInfo = msg.successful_payment;

    try {
        // ‚úÖ Extract payload data
        const payload = JSON.parse(paymentInfo.invoice_payload);
        const telegramId = payload.telegram_id;
        const userId = payload.user_id; // User ID from backend
        const trainingId = payload.training_id;

        console.log(`üì¶ Payment Confirmed: Telegram ID: ${telegramId}, User ID: ${userId}, Training ID: ${trainingId}`);

        // ‚úÖ Add Training to User in DB
        const addTrainingResponse = await axios.post(
            `${BACKEND_PUBLIC_URL}/trainings/add-training`,
            {
                user_id: userId,
                training_id: trainingId,
            }
        );

        console.log("‚úÖ Training Added:", addTrainingResponse.data);
        await bot.sendMessage(
            chatId,
            `‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.`
        );
    } catch (error) {
        console.error("‚ùå Payment Processing Error:", error);
        await bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.");
    }
});

console.log("üöÄ Bot is running...");

module.exports = bot;